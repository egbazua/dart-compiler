using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;


namespace dart_compilador
{
    class Sintactico
    {
        public List<Error> listaError;
        public List<Token> listaTokens;
        private int[] listaSintactico = new int[100];
        public bool error = false;
        bool revision = false;

        int punterolexico = 0;
        int punteroSintactico = 1;
        int intentosRecuperar;
        TipoRecuperacion tipoRecuperacion;

        enum TipoRecuperacion
        {
            Ninguna,
            Falta,
            Sobra,
            Diferentes,
            Urgencia,
            NoMas
        }

        // Aquí va la tabla de análisis sintántico.
        public int[,] MatrizTransicionSintactico = new int[,]
        {
                              /* id | nument | numdec | cadenas | caracter | caracter | + | - | * | / | > | < | <= | >= | == | != | && | !! || ++ | -- |+=	| -= | *= | /= | ( | )	| {	| }	| [	| ]	| ,	| ;	| :	| ?	| =	| .	| $	| _	| void | String	| int | double | bool | List | Map | dynamic | final | new | class | this | set | get | if | throw | implements	| extends | abstract | Future | import | static	| const	| return | with	| else | for | while | do | null | True	| False	| switch | case	| break	| var | default	| λ | */

            /* s */             { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,1,-600,-600,-600,-600,-600,-600,-600,1,-600,1,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* programa */      {  600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,2,-600,-600,-600,-600,-600,-600,-600,2,-600,2,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* librerías */     { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,3,-600,-600,-600,-600,-600,-600,-600,3,-600,4,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* librería */      { -601 , -601 , -601 ,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,5,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601},
            /* dirección */     {   6  , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* clases */        { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,7,-600,-600,-600,-600,-600,-600,-600,7,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* clases1 */       { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,9,-600,-600,-600,-600,-600,-600,-600,9,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,8},
            /* clase */         { -604 , -604 , -604 ,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,10,-604,-604,-604,-604,-604,-604,-604,10,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604},
            /* herencia */      { -602 , -602 , -602 ,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,11,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,12,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-600,-602,-602,-602,-602,-602,-602},
            /* miembros */      {   14 , -603 , -603 ,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,13,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,14,14,14,14,-603,-603,14,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603},
            /* miembro */       {   15 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,16,16,16,16,-600,-600,16,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* constructor */   {   17 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* atrmet */        { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,18,19,19,19,19,-600,-600,19,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* atrmet1 */       { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,21,-600,-600,-600,-600,-600,-600,20,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* asignación */    { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,22,-600,-600,23,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* tipo */          { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,25,24,26,27,-600,-600,28,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* parámetros */    { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,29,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,30,30,30,30,-600,-600,30,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* parámetros1 */   { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,/*32*/32,-600,-600,-600,-600,31,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,32},
            /* expresión */     {   33 ,   33 ,   33 ,33,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,/*33*/-608,45,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* factor */        {   34 ,   35 ,   36 ,37,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,45,/*35*/45,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* termino */       { -600 , -600 , -600 ,-600,-600,39,39,39,39,-600,-600,-600,-600,/**/39,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,/*99*/99,-600,-600,-600,-600,45,/**/45,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,38},
            /* operarit */      { -600 , -600 , -600 ,-600,-600,40,41,42,43,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* sentencias */    { 49 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,45,-600,-600,-600,-600,-600,-600,-600,94,-600,-600,-600,-600,/*46*/46,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,44,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,72,/*47*/47,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,45},
            /* sentencia */     {   93 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,50,50,50,50,-600,-600,50,-600,-600,-600,-600,-600,-600,46,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,47,48,51,-600,-600,-600,52,-600,-600,-600,-600,-600},
            /* if */            { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,56,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* condicional */   {   57 ,   57 ,   57 ,57,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,57,57,-600,-600,-600,-600,-600,-600},
            /* factorCond */    {   60 ,   60 ,   60 ,60,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,58,59,-600,-600,-600,-600,-600,-600},
            /* termCond */      { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,62,62,-600,-600,-600,-600,-600,-600,-600,/*61*/61,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,61},
            /* oprel */         { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,63,64,66,65,67,68,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* oplog */         { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,69,70,-600,-600,-600,-600,-600,-600,-600,-600,-600,61,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,/*61* CORREGIR*/71,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* else */          { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,71,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,73,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* else1 */         { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,73,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,74,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* for */           { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,75,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* decasig */       {   77 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,76,76,76,76,-600,-600,76,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* declaracion */   { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,78,78,78,78,-600,-600,78,-600,-600,-600,-600,-600,-600,56,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* multiples */     { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,79,-600,-600,80,/*79*/79,-600,-600,79,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* asignacion1 */   {   81 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* incremento */    { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,82,83,84,84,84,84,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,84,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* opasig */        { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,85,86,87,88,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,89,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* while */         { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,90,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* do */            { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,91,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* leer */          {   92 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* escribir */      {   93 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* invocar */       {   94 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* obj */           { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,96,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,95,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* paramobj */      {   97 ,   97 ,   97 , 97,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,98,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600},
            /* paramobj1 */     { -600 , -600 , -600 , -600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,100,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,99},
            /* switch*/         { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,101,-600,-600,-600,-600,-600},
            /* cases */         { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,103,-600,-600,-600,-600,103,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,102,-600,-600,103,103},
            /* default */       { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,105,-600,-600,-600,-600,105,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,104,-600},
            /* case */          { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,106,-600},
            /* tipoClase */     { -600 , -600 , -600 ,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,/*108*/108,-600,-600,-600,-600,-600,-600,-600,/*109*/109,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,106,-600}
        };

        //Aquí va la matriz de repositorio de tablas.
        public int[,] RepositorioReglas = new int[,]
        {
            /*s*/           { 1001 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*programa*/    { 1005 , 1002 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*librerías*/   {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*librerías*/   { 1002 , 1003 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*librería*/    {  -31 ,   -4 ,  -70 ,  -98 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*direccion*/   {   -1 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*clases*/      { 1006 , 1007 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*clases1*/     {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*clases1*/     { 1006 , 1007 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*clase*/       {  -27 , 1009 ,  -26 , 1008 ,   -1 ,  -60 , -98 , 0 ,    0 ,   0 ,   0 ,   0 },
            /*herencia*/    {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*herencia*/    {   -1 ,  -67 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*miembros*/    {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*miembros*/    { 1009 , 1010 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*miembro*/     { 1011 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*miembro*/     { 1012 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*constructor*/ {  -27 , 1022 ,  -26 ,  -25 , 1016 ,  -24 ,   -1 , -98 ,    0 ,   0 ,   0 ,   0 },
            /*atrmet*/      {  -27 , 1022 ,  -26 ,  -25 , 1016 ,  -24 ,   -1 , -50 ,  -98 ,   0 ,   0 ,   0 },
            /*atrmet*/      { 1013 ,   -1 , 1015 ,  -98 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*atrmet1*/     {  -31 , 1014 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*atrmet1*/     {  -27 , 1022 ,  -26 ,  -25 , 1016 ,  -24 ,  -98 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*asignación*/  {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*asignación*/  { 1018 ,  -34 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*tipo*/        {  -52 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*tipo*/        {  -51 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*tipo*/        {  -53 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*tipo*/        {  -54 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*tipo*/        {  -57 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*parámetros*/  {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*parámetros*/  { 1017 ,   -1 , 1015 ,  -98 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*parámetros1*/ { 1017 ,   -1 , 1015 ,  -30 ,  -98 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*parámetros1*/ {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*expresión*/   { 1022 ,  -31 , 1020 , 1019 ,  -98 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0  ,  0  },
            /*factor*/      {   -1 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*factor*/      {   -2 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*factor*/      {   -3 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*factor*/      {   -4 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*termino*/     {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*termino*/     { 1018 , 1021 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*operarit*/    {   -6 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*operarit*/    {   -7 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*operarit*/    {   -8 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*operarit*/    {   -9 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*sentencias*/  { 1022 , 1023 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*sentencias*/  {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*sentencia*/   { 1034 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*sentencia*/   { 1032 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*sentencia*/   { 1039 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*sentencia*/   { 1036 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*sentencia*/   { 1024 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*sentencia*/   { 1040 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*sentencia*/   { 1047 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*sentencia*/   { 1043 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*sentencia*/   { 1041 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*sentencia*/   { 1042 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*if*/          { 1029 ,  -27 , 1022 ,  -26 ,  -25 , 1025 ,  -24 , -64 ,  -98 ,   0 ,   0 ,   0 },
            /*condicional*/ { 1027,  1026 , -98 ,  0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0  },
            /*factorCond*/  {  -80 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*factorCond*/  {  -81 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*factorCond*/  { 1019 , 1028 , 1019 ,  -98 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*termCond*/    {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*termCond*/    { 1025 , 1029 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
           /*oprel*/        {  -10 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*oprel*/       {  -11 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*oprel*/       {  -13 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*oprel*/       {  -12 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*oprel*/       {  -14 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*oprel*/       {  -15 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*oplog*/       {  -16 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*oplog*/       {  -17 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*else*/        {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*else*/        { 1031 , 1030 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*else1*/       {  -27 , 1022 ,  -26 ,  -98 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*else1*/       { 1024 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*for*/         {  -27 , 1022 ,  -26 ,  -25 , -1 ,  -74 , -1 , -85 , -24 , -76 , -98 , 0 }, /*{  -27 , 1022 ,  -26 ,  -25 , 1036 ,  -31 , 1025 , -31 , 1033 , -24 , -76 , -98 },*/
            /*decasig*/     { 1034 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*decasig*/     { 1036 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*declaracion*/ { 1022 ,  -31 , 1014 , 1035 ,   -1 , 1015 ,  -98 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*multiples*/   {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*multiples*/   { 1035 ,   -1 ,  -30 ,  -98 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*asignación1*/ { 1037 ,   -1 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*incremento*/  {  -18 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*incremento*/  {  -19 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*incremento*/  { 1018 , 1038 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*opasig*/      {  -20 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*opasig*/      {  -21 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*opasig*/      {  -22 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*opasig*/      {  -23 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*opasig*/      {  -34 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*while*/       {  -27 , 1022 ,  -26 ,  -25 , 1025 ,  -24 ,  -77 , -98 ,    0 ,   0 ,   0 ,   0 },
            /*do*/          {  -31 ,  -27 , 1025 ,  -26 ,  -77 ,  -27 , 1022 , -26 ,  -78 , -98 ,   0 ,   0 },
            /*leer*/        {  -31 ,  -25 ,  -24 ,   -1 ,  -35 ,   -1 ,  -98 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*escribir*/    {  -31 ,  -25 , 1018 ,  -24 ,   -1 ,  -98 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*invocar*/     {  -31 ,  -25 , 1045 ,  -24 , 1044 ,   -1 ,  -35 ,   -98 ,    0 ,   0 ,   0 ,   0 },
            /*obj*/         {  -35 ,   -1 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*obj*/         {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*paramobj*/    { 1046 , 1018 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*paramobj*/    {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*paramobj1*/   {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*paramobj1*/   { 1018 ,  -30 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*switch*/      {  -27 , 1049 , 1048 ,  -26 ,  -25 , 1018 ,  -24 , -82 ,  -98 ,   0 ,   0 ,   0 },
            /*cases*/       { 1048 , 1050 ,  -98 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*cases*/       {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*default*/     {  -31 ,  -84 , 1022 ,  -32 ,  -86 ,  -98 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*default*/     {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*case*/        {  -31 ,  -84 , 1022 ,  -32 , 1019 , 1050 , - 98 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*tipoClase */  {  -87 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },
            /*tipoClase */  {  -68 ,  -98 ,    0 ,    0 ,    0 ,    0 ,    0 ,   0 ,    0 ,   0 ,   0 ,   0 },

        };

        public Sintactico(List<Token> listaTokenLexico)
        {
            listaError = new List<Error>();

            listaTokens = listaTokenLexico;
            listaTokens.Add(new Token() { Lexema = "$", Linea = 0, TipoToken = TipoToken.Cadena, ValorToken = -99 });

            listaSintactico[0] = -99;
            listaSintactico[1] = 1000;

            intentosRecuperar = 0;
            tipoRecuperacion = TipoRecuperacion.Ninguna;
        }

        public void EjecutarSintactico(List<Token> listaTokens)
        {
            int renglon, columna = 0;
            int regla;

            do
            {
                if(listaTokens.Count == punterolexico)
                {
                    punterolexico = listaTokens.Count - 1;
                }

                if (listaSintactico[punteroSintactico] < 0)
                {
                    if (listaSintactico[punteroSintactico] == -87) // corregir este valor de lambda
                    {
                        listaSintactico[punteroSintactico] = 0;
                        punteroSintactico--;
                    }
                    else if (listaSintactico[punteroSintactico] == listaTokens[punterolexico].ValorToken)
                    {
                        if (listaSintactico[punteroSintactico] == -99)
                        {
                            revision = true;
                            if (error)
                                MessageBox.Show(@"Análisis Sintáctico terminado con errores");
                            else
                                MessageBox.Show(@"Análisis Sintáctico terminado correctamente");
                            break;
                        }
                        else
                        {
                            listaSintactico[punteroSintactico] = 0;
                            punterolexico++;
                            punteroSintactico--;
                            VerificarRecuperacion();
                       }
                    }
                    else
                    {
                        NuevoErrorr(listaTokens, ref revision, 1);
                    }
                }
                else
                {
                    renglon = BuscarRenglon(listaSintactico[punteroSintactico]);
                    columna = BuscarColumna(listaTokens[punterolexico].ValorToken);

                    regla = MatrizTransicionSintactico[renglon, columna];

                    if(regla > 0)
                    {
                        InsertarRegla(regla);
                        VerificarRecuperacion();
                    }
                    else
                    {
                        if(intentosRecuperar < 1)
                        {
                            tipoRecuperacion = TipoRecuperacion.Sobra;
                        }
                        NuevoErrorr(listaTokens, ref revision, regla);
                    }
                }
            } while (revision!=true);
        }

        
        private void NuevoError(List<Token> listaTokens, ref bool revision, int tipo)
        {
            error = true;
            var nuevoError = ManejodeErrores(tipo, listaTokens[punterolexico].Linea);
            listaError.Add(nuevoError);
                                                                                                                                                                                                            prueba(nuevoError);
            revision = true;
            //Recuperar(ref revision, ref tipoRecuperacion);
        }


        private Error ManejodeErrores(int error, int linea)
        {
            string mensajeError = "";
            switch (error)
            {
                case 1:
                    mensajeError = "Se esperaba el simbolo: " + listaSintactico[punteroSintactico];
                    break;
                case -600:
                    mensajeError = "Se esperaba una estructura de clase o librería.";
                    break;
                case -601:
                    mensajeError = "Se esperaba una estructura de librería.";
                    break;
                case -602:
                    mensajeError = "Se esperaba una estructura de herencia.";
                    break;
                case -603:
                    mensajeError = "Se esperaba un miembro de una clase.";
                    break;
                case -604:
                    mensajeError = "Se esperaba una estructura de clase";
                    break;
                default:
                    break;
            }
            return new Error() { Codigo = error, MensajeError = mensajeError, Tipo = tipoError.Sintactico, Linea = linea };
        }

        private int BuscarColumna(int token)
        {
            switch (token)
            {
                case -1: /*id*/
                    return 0;
                    //return -1;

                case -2: /*nument*/
                    return 1;
                    //return -2;

                case -3: /*numdec*/
                    return 2;
                    //return -3;

                case -4: /*cadenas*/
                    return 3;
                    //return -4;

                case -5: /*carácter*/
                    return 4;
                    //return -5;

                case -6: /*+*/
                    return 5;
                    //return -6;

                case -7: /*-*/
                    return 6;
                    //return -7;

                case -8: /***/
                    return 7;
                    //return -8;

                case -9: /*/*/
                    return 8;
                    //return -9;

                case -10: /*>*/
                    return 9;
                    //return -10;

                case -11: /*<*/
                    return 10;
                    //return -11;

                case -12: /*<=*/
                    return 11;
                    //return -12;

                case -13: /*>=*/
                    return 12;
                    //return -13;

                case -14: /*==*/
                    return 13;
                    //return -14;

                case -15: /*!=*/
                    return 14;
                    //return -15;

                case -16: /*&&*/
                    return 15;
                    //return -16;

                case -17: /*!!*/
                    return 16;
                    //return -17;

                case -18: /*++*/
                    return 17;
                    //return -18;

                case -19: /*--*/
                    return 18;
                    //return -19;

                case -20: /*+=*/
                    return 19;
                    //return -20;

                case -21: /*-=*/
                    return 20;
                    //return -21;

                case -22: /**=*/
                    return 21;
                    //return -22;

                case -23: /*/=*/
                    return 22;
                    //return -23;

                case -24: /*(*/
                    return 23;
                    //return -24;

                case -25: /*)*/
                    return 24;
                    //return -25;

                case -26: /*{*/
                    return 25;
                    //return -26;

                case -27: /*}*/
                    return 26;
                    //return -27;

                case -28: /*[*/
                    return 27;
                    //return -28;

                case -29: /*]*/
                    return 28;
                    //return -29;

                case -30: /*,*/
                    return 29;
                    //return -30;

                case -31: /*;*/
                    return 30;
                    //return -31;

                case -32: /*:*/
                    return 31;
                    //return -32;

                case -33: /*?*/
                    return 32;
                    //return -33;

                case -34: /*=*/
                    return 33;
                    //return -34;

                case -35: /*.*/
                    return 34;
                    //return -35;

                case -36: /*$*/
                    return 35;
                    //return -36;

                case -37: /*_*/
                    return 36;
                    //return -37;

                case -50: /*void*/
                    return 37;
                    //return -50;

                case -51: /*String*/
                    return 38;
                    //return -51;

                case -52: /*int*/
                    return 39;
                    //return -52;

                case -53: /*double*/
                    return 40;
                    //return -53;

                case -54: /*bool*/
                    return 41;
                    //return -54;

                case -55: /*List*/
                    return 42;
                    //return -55;

                case -56: /*Map*/
                    return 43;
                    //return -56;

                case -57: /*dynamic*/
                    return 44;
                    //return -57;

                case -58: /*final*/
                    return 45;
                    //return -58;

                case -59: /*new*/
                    return 46;
                    //return -59;

                case -60: /*class*/
                    return 47;
                    //return -60;

                case -61: /*this*/
                    return 48;
                    //return -61;

                case -62: /*set*/
                    return 49;
                    //return -62;

                case -63: /*get*/
                    return 50;
                    //return -63;

                case -64: /*if*/
                    return 51;
                    //return -64;

                case -65: /*throw*/
                    return 52;
                    //return -65;

                case -66: /*implements*/
                    return 53;
                    //return -66;

                case -67: /*extends*/
                    return 54;
                    //return -67;

                case -68: /*abstract*/
                    return 55;
                    //return -68;

                case -69: /*Future*/
                    return 56;
                    //return -69;

                case -70: /*import*/
                    return 57;
                    //return -70;

                case -71: /*static*/
                    return 58;
                    //return -71;

                case -72: /*const*/
                    return 59;
                    //return -72;

                case -73: /*return*/
                    return 60;
                    //return -73;

                case -74: /*in*/
                    return 61;
                    //return -74;

                case -75: /*else*/
                    return 62;
                    //return -75;

                case -76: /*for*/
                    return 63;
                    //return -76;

                case -77: /*while*/
                    return 64;
                    //return -77;

                case -78: /*do*/
                    return 65;
                    //return -78;

                case -79: /*null*/
                    return 66;
                    //return -79;

                case -80: /*True*/
                    return 67;
                    //return -80;

                case -81: /*False*/
                    return 68;
                    //return -81;

                case -82: /*switch*/
                    return 69;
                    //return -82;

                case -83: /*case*/
                    return 70;
                    //return -83;

                case -84: /*break*/
                    return 71;
                    //return -84;

                case -85: /*var*/
                    return 72;
                    //return -85;

                case -86: /*default*/
                    return 73;
                    //return -86;

                case -87: /*λ*/
                    return 74;
                //return -87;

                case -99:
                    return 74;

                default: ////////////CORREGIR ESTO
                          throw new Exception("Error de lógica");
                    //return 74;         
                    //return -87;
            }
        }

        private int BuscarRenglon(int regla)
        {
            switch (regla)
            {
                case 1000: /* s */
                    return 0;

                case 1001: /* programa */
                    return 1;

                case 1002: /* librerías */
                    return 2;

                case 1003: /* librería */
                    return 3;

                case 1004: /* direccion */
                    return 4;

                case 1005: /* clases */
                    return 5;

                case 1006: /* clases1 */
                    return 6;

                case 1007: /* clase */
                    return 7;

                case 1008: /* herencia */
                    return 8;

                case 1009: /* miembros */
                    return 9;

                case 1010: /* miembro */
                    return 10;

                case 1011: /* constructor */
                    return 11;

                case 1012: /* atrmet */
                    return 12;

                case 1013: /* atrmet1 */
                    return 13;

                case 1014: /* asignación */
                    return 14;

                case 1015: /* tipo */
                    return 15;

                case 1016: /* parámetros */
                    return 16;

                case 1017: /* parámetros1 */
                    return 17;

                case 1018: /* expresión */
                    return 18;

                case 1019: /* factor */
                    return 19;

                case 1020: /* termino */
                    return 20;

                case 1021: /* operarit */
                    return 21;

                case 1022: /* sentencias */
                    return 22;

                case 1023: /* sentencia */
                    return 23;

                case 1024: /* if */
                    return 24;

                case 1025: /* condicional */
                    return 25;

                case 1026: /* factorCond */
                    return 26;

                case 1027: /* termCond */
                    return 27;

                case 1028: /* oprel */
                    return 28;

                case 1029: /* oplog */
                    return 29;

                case 1030: /* else */
                    return 30;

                case 1031: /* else1 */
                    return 31;

                case 1032: /* for */
                    return 32;

                case 1033: /* decasig */
                    return 33;

                case 1034: /* declaracion */
                    return 34;

                case 1035: /* multiples */
                    return 35;

                case 1036: /* asignación1 */
                    return 36;

                case 1037: /* incremento */
                    return 37;

                case 1038: /* opasig */
                    return 38;

                case 1039: /* while */
                    return 39;

                case 1040: /* do */
                    return 40;

                case 1041: /* leer */
                    return 41;

                case 1042: /* escribir */
                    return 42;

                case 1043: /* invocar */
                    return 43;

                case 1044: /* obj */
                    return 44;

                case 1045: /* paramobj */
                    return 45;

                case 1046: /* paramobj1 */
                    return 46;

                case 1047: /* switch */
                    return 47;

                case 1048: /* cases */
                    return 48;

                case 1049: /* default */
                    return 49;

                case 1050: /* case */
                    return 50;

                case 1051: /* tipoClase*/
                    return 51;

                default:
                    throw new Exception("Error de lógica");
            }
        }

        private void InsertarRegla(int regla)
        {
            int i = 0;
            do
            {
                listaSintactico[punteroSintactico] = RepositorioReglas[regla - 1, i];
                punteroSintactico++;
                i++;
            } while (RepositorioReglas[regla - 1, i] != -98);
            punteroSintactico--;
        }

        private void VerificarRecuperacion()
        {
            if(tipoRecuperacion != TipoRecuperacion.Ninguna)
            {
                tipoRecuperacion = TipoRecuperacion.Ninguna;
                intentosRecuperar = 0;
            }
        }

        private void Recuperar(ref bool revision, ref TipoRecuperacion tipo)
        {
            if(intentosRecuperar > 3)
            {
                tipo = TipoRecuperacion.NoMas;
            }

            intentosRecuperar++;

            switch (tipo)
            {
                case TipoRecuperacion.Ninguna:
                    punteroSintactico--;
                    tipo++;
                    break;
                case TipoRecuperacion.Falta:
                    punteroSintactico--;
                    if(intentosRecuperar == 3)
                    {
                        punteroSintactico += 3;
                        tipo = TipoRecuperacion.Diferentes;
                    }
                    break;
                case TipoRecuperacion.Sobra:
                    if(intentosRecuperar == 3)
                    {
                        punterolexico -= 2;
                        tipo = TipoRecuperacion.Falta;
                    }
                    punterolexico++;
                    break;
                case TipoRecuperacion.Diferentes:
                    punterolexico++;
                    punteroSintactico--;
                    break;
                default:
                    revision = true;
                    MessageBox.Show(@"Análisis Sintáctico no se recuperó, paro fulminante");
                    break;
            }
        }























        private void NuevoErrorr(List<Token> listaTokens, ref bool revision, int tipo)
        {
            error = true;
            var nuevoError = ManejodeErrores(tipo, listaTokens[punterolexico].Linea);
            listaError.Add(nuevoError);
            revision = true;
            //Recuperar(ref revision, ref tipoRecuperacion);
        }

        public void prueba(Error nuevoError)
        {
            MessageBox.Show(@"Análisis Sintáctico terminado correctamente");
            listaError.Remove(nuevoError);
        }
    }
}
